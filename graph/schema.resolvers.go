package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/o-ga09/graphql-go/graph/model"
)

// CreateNote is the resolver for the createNote field.
func (r *mutationResolver) CreateNote(ctx context.Context, input model.NewNote) (*model.Note, error) {
	panic(fmt.Errorf("not implemented: CreateNote - createNote"))
}

// UpdateNote is the resolver for the updateNote field.
func (r *mutationResolver) UpdateNote(ctx context.Context, input model.NewNote) (*model.Note, error) {
	panic(fmt.Errorf("not implemented: UpdateNote - updateNote"))
}

// DeleteNote is the resolver for the deleteNote field.
func (r *mutationResolver) DeleteNote(ctx context.Context, input model.NewNote) (*model.Note, error) {
	panic(fmt.Errorf("not implemented: DeleteNote - deleteNote"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// Notes is the resolver for the notes field.
func (r *queryResolver) Notes(ctx context.Context) ([]*model.Note, error) {
	res := []*model.Note{
		{
			ID:      uuid.New(),
			Content: "Note 1",
			Title:   "Title 1",
			Tags:    []string{"tag1", "tag2"},
			User: &model.User{
				ID:              uuid.New(),
				FirstName:       "User 1",
				LastName:        "User 1",
				Email:           "hoge@example.com",
				Address:         "Tokyo",
				Sex:             0,
				Password:        "password",
				BirthDay:        "2000-01-01",
				CreatedDateTime: time.Now(),
				UpdatedDateTime: time.Now(),
			},
		},
	}

	return res, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	res := []*model.User{
		{
			ID:              uuid.New(),
			FirstName:       "User 1",
			LastName:        "User 1",
			Email:           "hoge@example.com",
			Address:         "Tokyo",
			Sex:             0,
			Password:        "password",
			BirthDay:        "2000-01-01",
			CreatedDateTime: time.Now(),
			UpdatedDateTime: time.Now(),
		},
	}

	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
