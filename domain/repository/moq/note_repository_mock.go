// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/o-ga09/graphql-go/domain"
	"github.com/o-ga09/graphql-go/domain/repository"
	"sync"
)

// Ensure, that NoteRepositoryMock does implement repository.NoteRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.NoteRepository = &NoteRepositoryMock{}

// NoteRepositoryMock is a mock implementation of repository.NoteRepository.
//
//	func TestSomethingThatUsesNoteRepository(t *testing.T) {
//
//		// make and configure a mocked repository.NoteRepository
//		mockedNoteRepository := &NoteRepositoryMock{
//			CreateNoteFunc: func(ctx context.Context, note *domain.Note) error {
//				panic("mock out the CreateNote method")
//			},
//			DeleteNoteByIDFunc: func(ctx context.Context, id string) error {
//				panic("mock out the DeleteNoteByID method")
//			},
//			GetNoteByIDFunc: func(ctx context.Context, id string) (*domain.Note, error) {
//				panic("mock out the GetNoteByID method")
//			},
//			GetNotesFunc: func(contextMoqParam context.Context) ([]*domain.Note, error) {
//				panic("mock out the GetNotes method")
//			},
//			UpdateNoteByIDFunc: func(ctx context.Context, id string, note *domain.Note) error {
//				panic("mock out the UpdateNoteByID method")
//			},
//		}
//
//		// use mockedNoteRepository in code that requires repository.NoteRepository
//		// and then make assertions.
//
//	}
type NoteRepositoryMock struct {
	// CreateNoteFunc mocks the CreateNote method.
	CreateNoteFunc func(ctx context.Context, note *domain.Note) error

	// DeleteNoteByIDFunc mocks the DeleteNoteByID method.
	DeleteNoteByIDFunc func(ctx context.Context, id string) error

	// GetNoteByIDFunc mocks the GetNoteByID method.
	GetNoteByIDFunc func(ctx context.Context, id string) (*domain.Note, error)

	// GetNotesFunc mocks the GetNotes method.
	GetNotesFunc func(contextMoqParam context.Context) ([]*domain.Note, error)

	// UpdateNoteByIDFunc mocks the UpdateNoteByID method.
	UpdateNoteByIDFunc func(ctx context.Context, id string, note *domain.Note) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateNote holds details about calls to the CreateNote method.
		CreateNote []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Note is the note argument value.
			Note *domain.Note
		}
		// DeleteNoteByID holds details about calls to the DeleteNoteByID method.
		DeleteNoteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetNoteByID holds details about calls to the GetNoteByID method.
		GetNoteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetNotes holds details about calls to the GetNotes method.
		GetNotes []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// UpdateNoteByID holds details about calls to the UpdateNoteByID method.
		UpdateNoteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Note is the note argument value.
			Note *domain.Note
		}
	}
	lockCreateNote     sync.RWMutex
	lockDeleteNoteByID sync.RWMutex
	lockGetNoteByID    sync.RWMutex
	lockGetNotes       sync.RWMutex
	lockUpdateNoteByID sync.RWMutex
}

// CreateNote calls CreateNoteFunc.
func (mock *NoteRepositoryMock) CreateNote(ctx context.Context, note *domain.Note) error {
	if mock.CreateNoteFunc == nil {
		panic("NoteRepositoryMock.CreateNoteFunc: method is nil but NoteRepository.CreateNote was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Note *domain.Note
	}{
		Ctx:  ctx,
		Note: note,
	}
	mock.lockCreateNote.Lock()
	mock.calls.CreateNote = append(mock.calls.CreateNote, callInfo)
	mock.lockCreateNote.Unlock()
	return mock.CreateNoteFunc(ctx, note)
}

// CreateNoteCalls gets all the calls that were made to CreateNote.
// Check the length with:
//
//	len(mockedNoteRepository.CreateNoteCalls())
func (mock *NoteRepositoryMock) CreateNoteCalls() []struct {
	Ctx  context.Context
	Note *domain.Note
} {
	var calls []struct {
		Ctx  context.Context
		Note *domain.Note
	}
	mock.lockCreateNote.RLock()
	calls = mock.calls.CreateNote
	mock.lockCreateNote.RUnlock()
	return calls
}

// DeleteNoteByID calls DeleteNoteByIDFunc.
func (mock *NoteRepositoryMock) DeleteNoteByID(ctx context.Context, id string) error {
	if mock.DeleteNoteByIDFunc == nil {
		panic("NoteRepositoryMock.DeleteNoteByIDFunc: method is nil but NoteRepository.DeleteNoteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteNoteByID.Lock()
	mock.calls.DeleteNoteByID = append(mock.calls.DeleteNoteByID, callInfo)
	mock.lockDeleteNoteByID.Unlock()
	return mock.DeleteNoteByIDFunc(ctx, id)
}

// DeleteNoteByIDCalls gets all the calls that were made to DeleteNoteByID.
// Check the length with:
//
//	len(mockedNoteRepository.DeleteNoteByIDCalls())
func (mock *NoteRepositoryMock) DeleteNoteByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteNoteByID.RLock()
	calls = mock.calls.DeleteNoteByID
	mock.lockDeleteNoteByID.RUnlock()
	return calls
}

// GetNoteByID calls GetNoteByIDFunc.
func (mock *NoteRepositoryMock) GetNoteByID(ctx context.Context, id string) (*domain.Note, error) {
	if mock.GetNoteByIDFunc == nil {
		panic("NoteRepositoryMock.GetNoteByIDFunc: method is nil but NoteRepository.GetNoteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetNoteByID.Lock()
	mock.calls.GetNoteByID = append(mock.calls.GetNoteByID, callInfo)
	mock.lockGetNoteByID.Unlock()
	return mock.GetNoteByIDFunc(ctx, id)
}

// GetNoteByIDCalls gets all the calls that were made to GetNoteByID.
// Check the length with:
//
//	len(mockedNoteRepository.GetNoteByIDCalls())
func (mock *NoteRepositoryMock) GetNoteByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetNoteByID.RLock()
	calls = mock.calls.GetNoteByID
	mock.lockGetNoteByID.RUnlock()
	return calls
}

// GetNotes calls GetNotesFunc.
func (mock *NoteRepositoryMock) GetNotes(contextMoqParam context.Context) ([]*domain.Note, error) {
	if mock.GetNotesFunc == nil {
		panic("NoteRepositoryMock.GetNotesFunc: method is nil but NoteRepository.GetNotes was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetNotes.Lock()
	mock.calls.GetNotes = append(mock.calls.GetNotes, callInfo)
	mock.lockGetNotes.Unlock()
	return mock.GetNotesFunc(contextMoqParam)
}

// GetNotesCalls gets all the calls that were made to GetNotes.
// Check the length with:
//
//	len(mockedNoteRepository.GetNotesCalls())
func (mock *NoteRepositoryMock) GetNotesCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetNotes.RLock()
	calls = mock.calls.GetNotes
	mock.lockGetNotes.RUnlock()
	return calls
}

// UpdateNoteByID calls UpdateNoteByIDFunc.
func (mock *NoteRepositoryMock) UpdateNoteByID(ctx context.Context, id string, note *domain.Note) error {
	if mock.UpdateNoteByIDFunc == nil {
		panic("NoteRepositoryMock.UpdateNoteByIDFunc: method is nil but NoteRepository.UpdateNoteByID was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   string
		Note *domain.Note
	}{
		Ctx:  ctx,
		ID:   id,
		Note: note,
	}
	mock.lockUpdateNoteByID.Lock()
	mock.calls.UpdateNoteByID = append(mock.calls.UpdateNoteByID, callInfo)
	mock.lockUpdateNoteByID.Unlock()
	return mock.UpdateNoteByIDFunc(ctx, id, note)
}

// UpdateNoteByIDCalls gets all the calls that were made to UpdateNoteByID.
// Check the length with:
//
//	len(mockedNoteRepository.UpdateNoteByIDCalls())
func (mock *NoteRepositoryMock) UpdateNoteByIDCalls() []struct {
	Ctx  context.Context
	ID   string
	Note *domain.Note
} {
	var calls []struct {
		Ctx  context.Context
		ID   string
		Note *domain.Note
	}
	mock.lockUpdateNoteByID.RLock()
	calls = mock.calls.UpdateNoteByID
	mock.lockUpdateNoteByID.RUnlock()
	return calls
}
