// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :execresult
INSERT INTO notes (
    note_id,
    title,
    tags,
    content
) VALUES (?, ?, ?, ?)
`

type CreateNoteParams struct {
	NoteID  string
	Title   string
	Tags    string
	Content string
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createNote,
		arg.NoteID,
		arg.Title,
		arg.Tags,
		arg.Content,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    user_id,
    username,
    displayname
) VALUES (?, ?, ?)
`

type CreateUserParams struct {
	UserID      string
	Username    string
	Displayname string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.UserID, arg.Username, arg.Displayname)
}

const createUserNote = `-- name: CreateUserNote :exec
INSERT INTO user_notes (
    user_id,
    note_id
) VALUES (?, ?)
`

type CreateUserNoteParams struct {
	UserID string
	NoteID string
}

func (q *Queries) CreateUserNote(ctx context.Context, arg CreateUserNoteParams) error {
	_, err := q.db.ExecContext(ctx, createUserNote, arg.UserID, arg.NoteID)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
UPDATE notes
SET delete_at = CURRENT_TIMESTAMP
WHERE note_id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, noteID string) error {
	_, err := q.db.ExecContext(ctx, deleteNote, noteID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET delete_at = CURRENT_TIMESTAMP
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, notes.note_id, title, tags, content, created_at, updated_at, user_id FROM notes
JOIN user_notes ON notes.note_id = user_notes.note_id
WHERE user_notes.note_id = ? AND delete_at IS NULL LIMIT 1
`

type GetNoteRow struct {
	ID        int64
	NoteID    string
	Title     string
	Tags      string
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    string
}

func (q *Queries) GetNote(ctx context.Context, noteID string) (GetNoteRow, error) {
	row := q.db.QueryRowContext(ctx, getNote, noteID)
	var i GetNoteRow
	err := row.Scan(
		&i.ID,
		&i.NoteID,
		&i.Title,
		&i.Tags,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getNotes = `-- name: GetNotes :many
SELECT id, notes.note_id, title, tags, content, created_at, updated_at, user_id FROM notes
JOIN user_notes ON notes.note_id = user_notes.note_id
WHERE user_notes.user_id = ? AND delete_at IS NULL
ORDER BY created_at DESC
`

type GetNotesRow struct {
	ID        int64
	NoteID    string
	Title     string
	Tags      string
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    string
}

func (q *Queries) GetNotes(ctx context.Context, userID string) ([]GetNotesRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotesRow
	for rows.Next() {
		var i GetNotesRow
		if err := rows.Scan(
			&i.ID,
			&i.NoteID,
			&i.Title,
			&i.Tags,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, username, displayname, created_at, updated_at FROM users
WHERE user_id = ? AND delete_at IS NULL LIMIT 1
`

type GetUserRow struct {
	ID          int64
	UserID      string
	Username    string
	Displayname string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetUser(ctx context.Context, userID string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Displayname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, user_id, username, displayname, created_at, updated_at FROM users
WHERE delete_at IS NULL
ORDER BY created_at DESC
`

type GetUsersRow struct {
	ID          int64
	UserID      string
	Username    string
	Displayname string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Displayname,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET title = ?,
    tags = ?,
    content = ?
WHERE note_id = ?
`

type UpdateNoteParams struct {
	Title   string
	Tags    string
	Content string
	NoteID  string
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote,
		arg.Title,
		arg.Tags,
		arg.Content,
		arg.NoteID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = ?,
    displayname = ?    
WHERE user_id = ?
`

type UpdateUserParams struct {
	Username    string
	Displayname string
	UserID      string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Username, arg.Displayname, arg.UserID)
	return err
}
