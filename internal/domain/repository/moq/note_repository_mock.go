// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/o-ga09/graphql-go/internal/domain"
	"github.com/o-ga09/graphql-go/internal/domain/repository"
	"sync"
)

// Ensure, that NoteRepositoryMock does implement repository.NoteRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.NoteRepository = &NoteRepositoryMock{}

// NoteRepositoryMock is a mock implementation of repository.NoteRepository.
//
//	func TestSomethingThatUsesNoteRepository(t *testing.T) {
//
//		// make and configure a mocked repository.NoteRepository
//		mockedNoteRepository := &NoteRepositoryMock{
//			DeleteFunc: func(ctx context.Context, id string) error {
//				panic("mock out the Delete method")
//			},
//			GetNoteAllFunc: func(contextMoqParam context.Context) ([]*domain.Note, error) {
//				panic("mock out the GetNoteAll method")
//			},
//			GetNoteByIDFunc: func(ctx context.Context, id string) (*domain.Note, error) {
//				panic("mock out the GetNoteByID method")
//			},
//			GetNoteByUserIdFunc: func(contextMoqParam context.Context, s string) ([]*domain.Note, error) {
//				panic("mock out the GetNoteByUserId method")
//			},
//			SaveFunc: func(ctx context.Context, note *domain.Note) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedNoteRepository in code that requires repository.NoteRepository
//		// and then make assertions.
//
//	}
type NoteRepositoryMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) error

	// GetNoteAllFunc mocks the GetNoteAll method.
	GetNoteAllFunc func(contextMoqParam context.Context) ([]*domain.Note, error)

	// GetNoteByIDFunc mocks the GetNoteByID method.
	GetNoteByIDFunc func(ctx context.Context, id string) (*domain.Note, error)

	// GetNoteByUserIdFunc mocks the GetNoteByUserId method.
	GetNoteByUserIdFunc func(contextMoqParam context.Context, s string) ([]*domain.Note, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, note *domain.Note) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetNoteAll holds details about calls to the GetNoteAll method.
		GetNoteAll []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// GetNoteByID holds details about calls to the GetNoteByID method.
		GetNoteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetNoteByUserId holds details about calls to the GetNoteByUserId method.
		GetNoteByUserId []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Note is the note argument value.
			Note *domain.Note
		}
	}
	lockDelete          sync.RWMutex
	lockGetNoteAll      sync.RWMutex
	lockGetNoteByID     sync.RWMutex
	lockGetNoteByUserId sync.RWMutex
	lockSave            sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *NoteRepositoryMock) Delete(ctx context.Context, id string) error {
	if mock.DeleteFunc == nil {
		panic("NoteRepositoryMock.DeleteFunc: method is nil but NoteRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedNoteRepository.DeleteCalls())
func (mock *NoteRepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetNoteAll calls GetNoteAllFunc.
func (mock *NoteRepositoryMock) GetNoteAll(contextMoqParam context.Context) ([]*domain.Note, error) {
	if mock.GetNoteAllFunc == nil {
		panic("NoteRepositoryMock.GetNoteAllFunc: method is nil but NoteRepository.GetNoteAll was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetNoteAll.Lock()
	mock.calls.GetNoteAll = append(mock.calls.GetNoteAll, callInfo)
	mock.lockGetNoteAll.Unlock()
	return mock.GetNoteAllFunc(contextMoqParam)
}

// GetNoteAllCalls gets all the calls that were made to GetNoteAll.
// Check the length with:
//
//	len(mockedNoteRepository.GetNoteAllCalls())
func (mock *NoteRepositoryMock) GetNoteAllCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetNoteAll.RLock()
	calls = mock.calls.GetNoteAll
	mock.lockGetNoteAll.RUnlock()
	return calls
}

// GetNoteByID calls GetNoteByIDFunc.
func (mock *NoteRepositoryMock) GetNoteByID(ctx context.Context, id string) (*domain.Note, error) {
	if mock.GetNoteByIDFunc == nil {
		panic("NoteRepositoryMock.GetNoteByIDFunc: method is nil but NoteRepository.GetNoteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetNoteByID.Lock()
	mock.calls.GetNoteByID = append(mock.calls.GetNoteByID, callInfo)
	mock.lockGetNoteByID.Unlock()
	return mock.GetNoteByIDFunc(ctx, id)
}

// GetNoteByIDCalls gets all the calls that were made to GetNoteByID.
// Check the length with:
//
//	len(mockedNoteRepository.GetNoteByIDCalls())
func (mock *NoteRepositoryMock) GetNoteByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetNoteByID.RLock()
	calls = mock.calls.GetNoteByID
	mock.lockGetNoteByID.RUnlock()
	return calls
}

// GetNoteByUserId calls GetNoteByUserIdFunc.
func (mock *NoteRepositoryMock) GetNoteByUserId(contextMoqParam context.Context, s string) ([]*domain.Note, error) {
	if mock.GetNoteByUserIdFunc == nil {
		panic("NoteRepositoryMock.GetNoteByUserIdFunc: method is nil but NoteRepository.GetNoteByUserId was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockGetNoteByUserId.Lock()
	mock.calls.GetNoteByUserId = append(mock.calls.GetNoteByUserId, callInfo)
	mock.lockGetNoteByUserId.Unlock()
	return mock.GetNoteByUserIdFunc(contextMoqParam, s)
}

// GetNoteByUserIdCalls gets all the calls that were made to GetNoteByUserId.
// Check the length with:
//
//	len(mockedNoteRepository.GetNoteByUserIdCalls())
func (mock *NoteRepositoryMock) GetNoteByUserIdCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockGetNoteByUserId.RLock()
	calls = mock.calls.GetNoteByUserId
	mock.lockGetNoteByUserId.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *NoteRepositoryMock) Save(ctx context.Context, note *domain.Note) error {
	if mock.SaveFunc == nil {
		panic("NoteRepositoryMock.SaveFunc: method is nil but NoteRepository.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Note *domain.Note
	}{
		Ctx:  ctx,
		Note: note,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, note)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedNoteRepository.SaveCalls())
func (mock *NoteRepositoryMock) SaveCalls() []struct {
	Ctx  context.Context
	Note *domain.Note
} {
	var calls []struct {
		Ctx  context.Context
		Note *domain.Note
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
