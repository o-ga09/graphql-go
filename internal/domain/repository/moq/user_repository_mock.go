// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/o-ga09/graphql-go/internal/domain"
	"github.com/o-ga09/graphql-go/internal/domain/repository"
	"sync"
)

// Ensure, that UserRepositoryMock does implement repository.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of repository.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked repository.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			CreateUserFunc: func(ctx context.Context, user *domain.User) error {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserByIdFunc: func(ctx context.Context, id string) error {
//				panic("mock out the DeleteUserById method")
//			},
//			GetUserByIdFunc: func(ctx context.Context, id string) (*domain.User, error) {
//				panic("mock out the GetUserById method")
//			},
//			GetUsersFunc: func(contextMoqParam context.Context) ([]*domain.User, error) {
//				panic("mock out the GetUsers method")
//			},
//			UpdateUserByIdFunc: func(ctx context.Context, id string, user *domain.User) error {
//				panic("mock out the UpdateUserById method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires repository.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, user *domain.User) error

	// DeleteUserByIdFunc mocks the DeleteUserById method.
	DeleteUserByIdFunc func(ctx context.Context, id string) error

	// GetUserByIdFunc mocks the GetUserById method.
	GetUserByIdFunc func(ctx context.Context, id string) (*domain.User, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(contextMoqParam context.Context) ([]*domain.User, error)

	// UpdateUserByIdFunc mocks the UpdateUserById method.
	UpdateUserByIdFunc func(ctx context.Context, id string, user *domain.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *domain.User
		}
		// DeleteUserById holds details about calls to the DeleteUserById method.
		DeleteUserById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetUserById holds details about calls to the GetUserById method.
		GetUserById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// UpdateUserById holds details about calls to the UpdateUserById method.
		UpdateUserById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// User is the user argument value.
			User *domain.User
		}
	}
	lockCreateUser     sync.RWMutex
	lockDeleteUserById sync.RWMutex
	lockGetUserById    sync.RWMutex
	lockGetUsers       sync.RWMutex
	lockUpdateUserById sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserRepositoryMock) CreateUser(ctx context.Context, user *domain.User) error {
	if mock.CreateUserFunc == nil {
		panic("UserRepositoryMock.CreateUserFunc: method is nil but UserRepository.CreateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *domain.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserRepository.CreateUserCalls())
func (mock *UserRepositoryMock) CreateUserCalls() []struct {
	Ctx  context.Context
	User *domain.User
} {
	var calls []struct {
		Ctx  context.Context
		User *domain.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUserById calls DeleteUserByIdFunc.
func (mock *UserRepositoryMock) DeleteUserById(ctx context.Context, id string) error {
	if mock.DeleteUserByIdFunc == nil {
		panic("UserRepositoryMock.DeleteUserByIdFunc: method is nil but UserRepository.DeleteUserById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteUserById.Lock()
	mock.calls.DeleteUserById = append(mock.calls.DeleteUserById, callInfo)
	mock.lockDeleteUserById.Unlock()
	return mock.DeleteUserByIdFunc(ctx, id)
}

// DeleteUserByIdCalls gets all the calls that were made to DeleteUserById.
// Check the length with:
//
//	len(mockedUserRepository.DeleteUserByIdCalls())
func (mock *UserRepositoryMock) DeleteUserByIdCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteUserById.RLock()
	calls = mock.calls.DeleteUserById
	mock.lockDeleteUserById.RUnlock()
	return calls
}

// GetUserById calls GetUserByIdFunc.
func (mock *UserRepositoryMock) GetUserById(ctx context.Context, id string) (*domain.User, error) {
	if mock.GetUserByIdFunc == nil {
		panic("UserRepositoryMock.GetUserByIdFunc: method is nil but UserRepository.GetUserById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUserById.Lock()
	mock.calls.GetUserById = append(mock.calls.GetUserById, callInfo)
	mock.lockGetUserById.Unlock()
	return mock.GetUserByIdFunc(ctx, id)
}

// GetUserByIdCalls gets all the calls that were made to GetUserById.
// Check the length with:
//
//	len(mockedUserRepository.GetUserByIdCalls())
func (mock *UserRepositoryMock) GetUserByIdCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetUserById.RLock()
	calls = mock.calls.GetUserById
	mock.lockGetUserById.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *UserRepositoryMock) GetUsers(contextMoqParam context.Context) ([]*domain.User, error) {
	if mock.GetUsersFunc == nil {
		panic("UserRepositoryMock.GetUsersFunc: method is nil but UserRepository.GetUsers was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	mock.lockGetUsers.Unlock()
	return mock.GetUsersFunc(contextMoqParam)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//
//	len(mockedUserRepository.GetUsersCalls())
func (mock *UserRepositoryMock) GetUsersCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetUsers.RLock()
	calls = mock.calls.GetUsers
	mock.lockGetUsers.RUnlock()
	return calls
}

// UpdateUserById calls UpdateUserByIdFunc.
func (mock *UserRepositoryMock) UpdateUserById(ctx context.Context, id string, user *domain.User) error {
	if mock.UpdateUserByIdFunc == nil {
		panic("UserRepositoryMock.UpdateUserByIdFunc: method is nil but UserRepository.UpdateUserById was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   string
		User *domain.User
	}{
		Ctx:  ctx,
		ID:   id,
		User: user,
	}
	mock.lockUpdateUserById.Lock()
	mock.calls.UpdateUserById = append(mock.calls.UpdateUserById, callInfo)
	mock.lockUpdateUserById.Unlock()
	return mock.UpdateUserByIdFunc(ctx, id, user)
}

// UpdateUserByIdCalls gets all the calls that were made to UpdateUserById.
// Check the length with:
//
//	len(mockedUserRepository.UpdateUserByIdCalls())
func (mock *UserRepositoryMock) UpdateUserByIdCalls() []struct {
	Ctx  context.Context
	ID   string
	User *domain.User
} {
	var calls []struct {
		Ctx  context.Context
		ID   string
		User *domain.User
	}
	mock.lockUpdateUserById.RLock()
	calls = mock.calls.UpdateUserById
	mock.lockUpdateUserById.RUnlock()
	return calls
}
